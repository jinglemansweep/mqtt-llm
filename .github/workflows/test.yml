name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.local/share/virtualenvs
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run tests with pytest
      run: |
        pytest -v --tb=short --cov=mqtt_llm --cov-report=xml --cov-report=term-missing --cov-report=html

    - name: Generate coverage report
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      run: |
        echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY
        coverage report --show-missing >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Archive coverage reports
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/

    - name: Test CLI functionality
      run: |
        # Test CLI help
        mqtt-llm --help

        # Test dry run with minimal config
        mqtt-llm --dry-run --mqtt-broker test --mqtt-subscribe-topic test --mqtt-publish-topic test --ollama-model test

        # Test version info
        python -c "import mqtt_llm; print('Package version check passed')"

  test-examples:
    name: Test Configuration Examples
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Test environment configuration loading
      run: |
        python -c "
        from mqtt_llm.config import AppConfig, MQTTConfig, OllamaConfig

        # Test basic config creation
        mqtt_config = MQTTConfig(
            broker='localhost',
            subscribe_topic='test/input',
            publish_topic='test/output'
        )
        ollama_config = OllamaConfig(model='test-model')
        app_config = AppConfig(mqtt=mqtt_config, ollama=ollama_config)
        
        print('✓ Configuration objects created successfully')
        print(f'✓ MQTT broker: {app_config.mqtt.broker}')
        print(f'✓ Ollama model: {app_config.ollama.model}')
        "
